"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _path = _interopRequireDefault(require("path"));

var _fs = _interopRequireDefault(require("fs"));

class AppContext {
  constructor(app) {
    this.controller = {};
    this.service = {};
    this.dao = {};
    this.app = app;
  }

  getControllers() {
    return this.controller;
  } // 动态引入文件


  dynamicRequrie(path) {
    var map = {};

    if (_fs.default.existsSync(path)) {
      var childs = _fs.default.readdirSync(path);

      childs.forEach(childName => {
        var info = _fs.default.statSync(path + "/" + childName);

        if (!info.isDirectory()) {
          var result = /(\S+)\.(js|ts)$/.exec(childName);

          if (result && result[1] !== 'index') {
            map[result[1]] = require(path + '/' + childName);
          }
        }
      });
    }

    return map;
  } // 将依赖项注入


  inject(constructor, instance) {
    var context = this;

    if (constructor.inject) {
      constructor.inject.forEach(injectName => {
        Object.defineProperty(instance, injectName, {
          get() {
            return context.dao[injectName] || context.service[injectName] || context.api[injectName];
          }

        });
      });
    }
  }

  registerApiRouter() {
    var {
      app,
      inject,
      dynamicRequrie
    } = this;
    var apiMap = dynamicRequrie(_path.default.resolve(__dirname, './api'));
    Object.keys(apiMap).map(apiName => {
      var ApiConstructor = apiMap[apiName].default;
      var apiInstance = new ApiConstructor();
      this.controller[apiName] = apiInstance; // 注入依赖

      inject(ApiConstructor, apiInstance); // 注册路由

      Object.getOwnPropertyNames(ApiConstructor.prototype).map(key => {
        // 如果requestMethod不为空表示这是一个路由
        if (apiInstance[key].requestMethod) {
          var {
            requestUrl,
            requestMethod,
            middleWare
          } = apiInstance[key];
          middleWare = middleWare || [];
          middleWare.push(apiInstance[key]);
          var middleWares = [];
          middleWare.forEach(fn => {
            middleWares.push((req, res, next) => {
              fn.call(apiInstance, req, res, next);
            });
          });
          app[requestMethod](requestUrl, ...middleWares);
        }
      });
    });
  } // 静态文件路由


  registerStaticFileRouter() {
    var {
      app
    } = this;
    app.use(app.get('express').static(_path.default.resolve(__dirname, '../static')));
    app.use('/card', app.get('express').static(_path.default.resolve(__dirname, '../cards')));
  }

}

AppContext.init = function (app) {
  var appContext = new AppContext(app); // appContext.registerService(app)

  appContext.registerApiRouter(); // appContext.registerDao(app)

  appContext.registerStaticFileRouter();
  console.log('controller', appContext.getControllers());
};

var _default = AppContext;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,