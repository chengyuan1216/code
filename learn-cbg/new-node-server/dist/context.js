"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _path = _interopRequireDefault(require("path"));

var _fs = _interopRequireDefault(require("fs"));

var context = {
  api: {},
  service: {},
  dao: {}
}; // 动态加载文件

function dynamicRequrie(path) {
  var map = {};

  if (_fs.default.existsSync(path)) {
    var childs = _fs.default.readdirSync(path);

    childs.forEach(childName => {
      var info = _fs.default.statSync(path + "/" + childName);

      if (!info.isDirectory()) {
        var result = /(\S+)\.(js|ts)$/.exec(childName);

        if (result && result[1] !== 'index') {
          map[result[1]] = require(path + '/' + childName);
        }
      }
    });
  }

  return map;
}

function inject(constructor, instance) {
  if (constructor.inject) {
    constructor.inject.forEach(injectName => {
      Object.defineProperty(instance, injectName, {
        get() {
          return context.dao[injectName] || context.service[injectName] || context.api[injectName];
        }

      });
    });
  }
}

function registerDao(app) {
  var daoMap = dynamicRequrie(_path.default.resolve(__dirname, './dao'));
  Object.keys(daoMap).forEach(daoName => {
    context.dao[daoName] = new daoMap[daoName]();
  });
}

function registerService(app) {
  var serviceMap = dynamicRequrie(_path.default.resolve(__dirname, './service'));
  Object.keys(serviceMap).forEach(serviceName => {
    var ServiceConstructor = serviceMap[serviceName];
    context.service[serviceName] = new ServiceConstructor();
    inject(ServiceConstructor, context.service[serviceName]);
  });
}

function registerApiRouter(app) {
  var apiMap = dynamicRequrie(_path.default.resolve(__dirname, './api'));
  Object.keys(apiMap).map(apiName => {
    var ApiConstructor = apiMap[apiName];
    var apiInstance = new ApiConstructor();
    inject(ApiConstructor, apiInstance);
    Object.getOwnPropertyNames(ApiConstructor.prototype).map(key => {
      if (apiInstance[key].requestMethod) {
        var {
          requestUrl,
          requestMethod,
          middleWare
        } = apiInstance[key];
        middleWare = middleWare || [];
        middleWare.push(apiInstance[key]);
        var middleWares = [];
        middleWare.forEach(fn => {
          middleWares.push((req, res, next) => {
            fn.call(apiInstance, req, res, next);
          });
        });
        app[requestMethod](requestUrl, ...middleWares);
      }
    });
  });
}

function registerStaticFileRouter(app) {
  app.use(app.get('express').static(_path.default.resolve(__dirname, '../static')));
  app.use('/card', app.get('express').static(_path.default.resolve(__dirname, '../cards')));
}

var Context = {
  init: app => {
    app.context = context;
    registerService(app);
    registerApiRouter(app);
    registerDao(app);
    registerStaticFileRouter(app);
  }
};

class AppContext {
  constructor() {
    this.controller = {};
    this.service = {};
    this.dao = {};
  }

  dynamicRequrie(path) {
    var map = {};

    if (_fs.default.existsSync(path)) {
      var childs = _fs.default.readdirSync(path);

      childs.forEach(childName => {
        var info = _fs.default.statSync(path + "/" + childName);

        if (!info.isDirectory()) {
          var result = /(\S+)\.(js|ts)$/.exec(childName);

          if (result && result[1] !== 'index') {
            map[result[1]] = require(path + '/' + childName);
          }
        }
      });
    }

    return map;
  }

}

var _default = Context;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,