"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

class Response {
  constructor(code, msg, data) {
    this.code = code;
    this.msg = msg;
    this.data = data;
    console.log("返回值", JSON.stringify(data));
  }

  setCode(code) {
    this.code = code;
  }

  getCode() {
    return this.code;
  }

  setMsg(msg) {
    this.msg = msg;
  }

  getMsg() {
    return this.msg;
  }

  setData(data) {
    this.data = data;
  }

  getData() {
    return this.data;
  }

}

exports.default = Response;

Response.success = (res, data) => {
  res.statusCode = 200;
  res.setHeader('Content-Type', 'text/json;charset=utf-8');
  res.end(JSON.stringify(new Response(Response.SUCCESS.code, Response.SUCCESS.msg, data)));
};

Response.error = (res, data) => {
  res.statusCode = 200;
  res.setHeader('Content-Type', 'text/json;charset=utf-8');
  res.end(JSON.stringify(new Response(Response.ERROR.code, Response.ERROR.msg, data)));
};

Response.exception = (res, data) => {
  try {
    res.statusCode = 200;
    res.setHeader('Content-Type', 'text/json;charset=utf-8');
    var result = JSON.stringify(new Response(Response.EXCEPTION.code, Response.EXCEPTION.msg, data));
    res.end(result);
    throw new Error(result);
  } catch (e) {
    console.error(e);
  }
};

Response.SUCCESS = {
  code: 0,
  msg: '操作成功'
};
Response.ERROR = {
  code: -1,
  msg: '操作失败'
};
Response.EXCEPTION = {
  code: -2,
  msg: '请求出现异常'
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9kdG8vUmVzcG9uc2UudHMiXSwibmFtZXMiOlsiUmVzcG9uc2UiLCJjb25zdHJ1Y3RvciIsImNvZGUiLCJtc2ciLCJkYXRhIiwiY29uc29sZSIsImxvZyIsIkpTT04iLCJzdHJpbmdpZnkiLCJzZXRDb2RlIiwiZ2V0Q29kZSIsInNldE1zZyIsImdldE1zZyIsInNldERhdGEiLCJnZXREYXRhIiwic3VjY2VzcyIsInJlcyIsInN0YXR1c0NvZGUiLCJzZXRIZWFkZXIiLCJlbmQiLCJTVUNDRVNTIiwiZXJyb3IiLCJFUlJPUiIsImV4Y2VwdGlvbiIsInJlc3VsdCIsIkVYQ0VQVElPTiIsIkVycm9yIiwiZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUNlLE1BQU1BLFFBQU4sQ0FBZTtBQVc3QkMsRUFBQUEsV0FBVyxDQUFDQyxJQUFELEVBQWVDLEdBQWYsRUFBNEJDLElBQTVCLEVBQXVDO0FBQ2pELFNBQUtGLElBQUwsR0FBWUEsSUFBWjtBQUNBLFNBQUtDLEdBQUwsR0FBV0EsR0FBWDtBQUNBLFNBQUtDLElBQUwsR0FBWUEsSUFBWjtBQUNBQyxJQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWSxLQUFaLEVBQW1CQyxJQUFJLENBQUNDLFNBQUwsQ0FBZUosSUFBZixDQUFuQjtBQUNBOztBQUVESyxFQUFBQSxPQUFPLENBQUNQLElBQUQsRUFBZTtBQUNyQixTQUFLQSxJQUFMLEdBQVlBLElBQVo7QUFDQTs7QUFFRFEsRUFBQUEsT0FBTyxHQUFHO0FBQ1QsV0FBTyxLQUFLUixJQUFaO0FBQ0E7O0FBRURTLEVBQUFBLE1BQU0sQ0FBQ1IsR0FBRCxFQUFjO0FBQ25CLFNBQUtBLEdBQUwsR0FBV0EsR0FBWDtBQUNBOztBQUVEUyxFQUFBQSxNQUFNLEdBQUc7QUFDUixXQUFPLEtBQUtULEdBQVo7QUFDQTs7QUFFRFUsRUFBQUEsT0FBTyxDQUFDVCxJQUFELEVBQVk7QUFDbEIsU0FBS0EsSUFBTCxHQUFZQSxJQUFaO0FBQ0E7O0FBRURVLEVBQUFBLE9BQU8sR0FBRztBQUNULFdBQU8sS0FBS1YsSUFBWjtBQUNBOztBQXhDNEI7Ozs7QUEyQzlCSixRQUFRLENBQUNlLE9BQVQsR0FBbUIsQ0FBQ0MsR0FBRCxFQUFNWixJQUFOLEtBQWU7QUFDakNZLEVBQUFBLEdBQUcsQ0FBQ0MsVUFBSixHQUFpQixHQUFqQjtBQUNBRCxFQUFBQSxHQUFHLENBQUNFLFNBQUosQ0FBYyxjQUFkLEVBQThCLHlCQUE5QjtBQUNBRixFQUFBQSxHQUFHLENBQUNHLEdBQUosQ0FBUVosSUFBSSxDQUFDQyxTQUFMLENBQWUsSUFBSVIsUUFBSixDQUFhQSxRQUFRLENBQUNvQixPQUFULENBQWlCbEIsSUFBOUIsRUFBb0NGLFFBQVEsQ0FBQ29CLE9BQVQsQ0FBaUJqQixHQUFyRCxFQUEwREMsSUFBMUQsQ0FBZixDQUFSO0FBQ0EsQ0FKRDs7QUFNQUosUUFBUSxDQUFDcUIsS0FBVCxHQUFpQixDQUFDTCxHQUFELEVBQU1aLElBQU4sS0FBZTtBQUMvQlksRUFBQUEsR0FBRyxDQUFDQyxVQUFKLEdBQWlCLEdBQWpCO0FBQ0FELEVBQUFBLEdBQUcsQ0FBQ0UsU0FBSixDQUFjLGNBQWQsRUFBOEIseUJBQTlCO0FBQ0FGLEVBQUFBLEdBQUcsQ0FBQ0csR0FBSixDQUFRWixJQUFJLENBQUNDLFNBQUwsQ0FBZSxJQUFJUixRQUFKLENBQWFBLFFBQVEsQ0FBQ3NCLEtBQVQsQ0FBZXBCLElBQTVCLEVBQWtDRixRQUFRLENBQUNzQixLQUFULENBQWVuQixHQUFqRCxFQUFzREMsSUFBdEQsQ0FBZixDQUFSO0FBQ0EsQ0FKRDs7QUFNQUosUUFBUSxDQUFDdUIsU0FBVCxHQUFxQixDQUFDUCxHQUFELEVBQU1aLElBQU4sS0FBZTtBQUNuQyxNQUFJO0FBQ0hZLElBQUFBLEdBQUcsQ0FBQ0MsVUFBSixHQUFpQixHQUFqQjtBQUNBRCxJQUFBQSxHQUFHLENBQUNFLFNBQUosQ0FBYyxjQUFkLEVBQThCLHlCQUE5QjtBQUNBLFFBQUlNLE1BQU0sR0FBR2pCLElBQUksQ0FBQ0MsU0FBTCxDQUFlLElBQUlSLFFBQUosQ0FBYUEsUUFBUSxDQUFDeUIsU0FBVCxDQUFtQnZCLElBQWhDLEVBQXNDRixRQUFRLENBQUN5QixTQUFULENBQW1CdEIsR0FBekQsRUFBOERDLElBQTlELENBQWYsQ0FBYjtBQUNBWSxJQUFBQSxHQUFHLENBQUNHLEdBQUosQ0FBUUssTUFBUjtBQUNBLFVBQU0sSUFBSUUsS0FBSixDQUFVRixNQUFWLENBQU47QUFDQSxHQU5ELENBTUUsT0FBT0csQ0FBUCxFQUFVO0FBQ1h0QixJQUFBQSxPQUFPLENBQUNnQixLQUFSLENBQWNNLENBQWQ7QUFDQTtBQUNELENBVkQ7O0FBa0JBM0IsUUFBUSxDQUFDb0IsT0FBVCxHQUFtQjtBQUNsQmxCLEVBQUFBLElBQUksRUFBRSxDQURZO0FBRWxCQyxFQUFBQSxHQUFHLEVBQUU7QUFGYSxDQUFuQjtBQUtBSCxRQUFRLENBQUNzQixLQUFULEdBQWlCO0FBQ2hCcEIsRUFBQUEsSUFBSSxFQUFFLENBQUMsQ0FEUztBQUVoQkMsRUFBQUEsR0FBRyxFQUFFO0FBRlcsQ0FBakI7QUFLQUgsUUFBUSxDQUFDeUIsU0FBVCxHQUFxQjtBQUNwQnZCLEVBQUFBLElBQUksRUFBRSxDQUFDLENBRGE7QUFFcEJDLEVBQUFBLEdBQUcsRUFBRTtBQUZlLENBQXJCIiwic291cmNlc0NvbnRlbnQiOlsidHlwZSBjYWxsYmFjayA9IChyZXM6IGFueSwgZGF0YTogYW55KSA9PiB2b2lkXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJlc3BvbnNlIHtcclxuXHRwcml2YXRlIGNvZGU6IG51bWJlclxyXG5cdHByaXZhdGUgbXNnOiBzdHJpbmdcclxuXHRwcml2YXRlIGRhdGE6IGFueVxyXG5cdHB1YmxpYyBzdGF0aWMgc3VjY2VzczogY2FsbGJhY2tcclxuXHRwdWJsaWMgc3RhdGljIGVycm9yOiBjYWxsYmFja1xyXG5cdHB1YmxpYyBzdGF0aWMgZXhjZXB0aW9uOiBjYWxsYmFja1xyXG5cdHB1YmxpYyBzdGF0aWMgU1VDQ0VTUzogUmVzcG9uc2VTdGF0dXNcclxuXHRwdWJsaWMgc3RhdGljIEVSUk9SOiBSZXNwb25zZVN0YXR1c1xyXG5cdHB1YmxpYyBzdGF0aWMgRVhDRVBUSU9OOiBSZXNwb25zZVN0YXR1c1xyXG5cclxuXHRjb25zdHJ1Y3Rvcihjb2RlOiBudW1iZXIsIG1zZzogc3RyaW5nLCBkYXRhOiBhbnkpIHtcclxuXHRcdHRoaXMuY29kZSA9IGNvZGVcclxuXHRcdHRoaXMubXNnID0gbXNnXHJcblx0XHR0aGlzLmRhdGEgPSBkYXRhXHJcblx0XHRjb25zb2xlLmxvZyhcIui/lOWbnuWAvFwiLCBKU09OLnN0cmluZ2lmeShkYXRhKSlcclxuXHR9XHJcblxyXG5cdHNldENvZGUoY29kZTogbnVtYmVyKSB7XHJcblx0XHR0aGlzLmNvZGUgPSBjb2RlXHJcblx0fVxyXG5cclxuXHRnZXRDb2RlKCkge1xyXG5cdFx0cmV0dXJuIHRoaXMuY29kZVxyXG5cdH1cclxuXHJcblx0c2V0TXNnKG1zZzogc3RyaW5nKSB7XHJcblx0XHR0aGlzLm1zZyA9IG1zZ1xyXG5cdH1cclxuXHJcblx0Z2V0TXNnKCkge1xyXG5cdFx0cmV0dXJuIHRoaXMubXNnXHJcblx0fVxyXG5cclxuXHRzZXREYXRhKGRhdGE6IGFueSkge1xyXG5cdFx0dGhpcy5kYXRhID0gZGF0YVxyXG5cdH1cclxuXHJcblx0Z2V0RGF0YSgpIHtcclxuXHRcdHJldHVybiB0aGlzLmRhdGFcclxuXHR9XHJcbn1cclxuXHJcblJlc3BvbnNlLnN1Y2Nlc3MgPSAocmVzLCBkYXRhKSA9PiB7XHJcblx0cmVzLnN0YXR1c0NvZGUgPSAyMDBcclxuXHRyZXMuc2V0SGVhZGVyKCdDb250ZW50LVR5cGUnLCAndGV4dC9qc29uO2NoYXJzZXQ9dXRmLTgnKVxyXG5cdHJlcy5lbmQoSlNPTi5zdHJpbmdpZnkobmV3IFJlc3BvbnNlKFJlc3BvbnNlLlNVQ0NFU1MuY29kZSwgUmVzcG9uc2UuU1VDQ0VTUy5tc2csIGRhdGEpKSlcclxufVxyXG5cclxuUmVzcG9uc2UuZXJyb3IgPSAocmVzLCBkYXRhKSA9PiB7XHJcblx0cmVzLnN0YXR1c0NvZGUgPSAyMDBcclxuXHRyZXMuc2V0SGVhZGVyKCdDb250ZW50LVR5cGUnLCAndGV4dC9qc29uO2NoYXJzZXQ9dXRmLTgnKVxyXG5cdHJlcy5lbmQoSlNPTi5zdHJpbmdpZnkobmV3IFJlc3BvbnNlKFJlc3BvbnNlLkVSUk9SLmNvZGUsIFJlc3BvbnNlLkVSUk9SLm1zZywgZGF0YSkpKVxyXG59XHJcblxyXG5SZXNwb25zZS5leGNlcHRpb24gPSAocmVzLCBkYXRhKSA9PiB7XHJcblx0dHJ5IHtcclxuXHRcdHJlcy5zdGF0dXNDb2RlID0gMjAwXHJcblx0XHRyZXMuc2V0SGVhZGVyKCdDb250ZW50LVR5cGUnLCAndGV4dC9qc29uO2NoYXJzZXQ9dXRmLTgnKVxyXG5cdFx0bGV0IHJlc3VsdCA9IEpTT04uc3RyaW5naWZ5KG5ldyBSZXNwb25zZShSZXNwb25zZS5FWENFUFRJT04uY29kZSwgUmVzcG9uc2UuRVhDRVBUSU9OLm1zZywgZGF0YSkpXHJcblx0XHRyZXMuZW5kKHJlc3VsdClcclxuXHRcdHRocm93IG5ldyBFcnJvcihyZXN1bHQpXHJcblx0fSBjYXRjaCAoZSkge1xyXG5cdFx0Y29uc29sZS5lcnJvcihlKVxyXG5cdH1cclxufVxyXG5cclxuXHJcbnR5cGUgUmVzcG9uc2VTdGF0dXMgPSB7XHJcblx0Y29kZTogbnVtYmVyLFxyXG5cdG1zZzogc3RyaW5nXHJcbn1cclxuXHJcblJlc3BvbnNlLlNVQ0NFU1MgPSB7XHJcblx0Y29kZTogMCxcclxuXHRtc2c6ICfmk43kvZzmiJDlip8nXHJcbn1cclxuXHJcblJlc3BvbnNlLkVSUk9SID0ge1xyXG5cdGNvZGU6IC0xLFxyXG5cdG1zZzogJ+aTjeS9nOWksei0pSdcclxufVxyXG5cclxuUmVzcG9uc2UuRVhDRVBUSU9OID0ge1xyXG5cdGNvZGU6IC0yLFxyXG5cdG1zZzogJ+ivt+axguWHuueOsOW8guW4uCdcclxufSJdfQ==